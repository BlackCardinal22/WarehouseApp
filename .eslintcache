[{"C:\\Users\\black\\Documents\\Development\\warehouse-map\\src\\App.js":"1","C:\\Users\\black\\Documents\\Development\\warehouse-map\\src\\index.js":"2"},{"size":7491,"mtime":1611465217575,"results":"3","hashOfConfig":"4"},{"size":197,"mtime":1607743628709,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"dkmp6",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\black\\Documents\\Development\\warehouse-map\\src\\App.js",["11","12","13","14","15","16","17"],"import {DataGrid} from '@material-ui/data-grid';\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport Papa from \"papaparse\";\nimport items from \"./items.csv\";\n// import * as fs from 'fs'\n// import neatCsv from 'neat-csv'\nimport { Component } from \"react\";\nimport \"./app.css\";\nimport {\n  Button,\n  TableBody,\n  TextField,\n  Typography,\n  Paper,\n  TableContainer,\n  Table,\n  TableCell,\n  TableRow,\n  TableHead,\n} from \"@material-ui/core\";\nconst fs = require(\"fs\");\n\nfunction product(sku, name, location) {\n  return { sku, name, location };\n}\n\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) return false;\n  }\n  return true;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchSku: \"\",\n      newName: \"\",\n      newSku: \"\",\n      newLocation: \"\",\n      searchProduct: null,\n      removeSku: \"\",\n      data: [],\n      products: {},\n    };\n\n    this.searchSku = this.searchSku.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addProduct = this.addProduct.bind(this);\n    this.removeProduct = this.removeProduct.bind(this);\n    this.deleteAll = this.deleteAll.bind(this);\n  }\n\n  async componentDidMount() {\n    const productsData = localStorage.getItem(\"products\");\n    let products = JSON.parse(productsData);\n    if (isEmpty(products)) {\n      fetch(items)\n        .then((r) => r.text())\n        .then((text) => {\n          console.log(\"text decoded:\", text);\n        });\n\n      // const items = fs.readFileSync('./items.csv',{encoding:'utf-8'})\n      console.log(items);\n    }\n    this.setState({ products });\n  }\n\n  handleInputChange(event, key) {\n    this.setState({ [key]: event.target.value });\n  }\n\n  searchSku() {\n    this.setState((state) => ({\n      searchProduct: state.products[state.searchSku],\n    }));\n  }\n\n  addProduct() {\n    this.setState((state) => {\n      if (!state.newSku || !state.newName || !state.newLocation) {\n        return state;\n      }\n      const newProduct = product(\n        state.newSku,\n        state.newName,\n        state.newLocation\n      );\n      const products = { ...state.products, [newProduct.sku]: newProduct };\n      localStorage.setItem(\"products\", JSON.stringify(products));\n      return {\n        products,\n      };\n    });\n  }\n\n  removeProduct() {\n    this.setState((state) => {\n      const products = { ...state.products };\n      delete products[state.removeSku];\n      localStorage.setItem(\"products\", JSON.stringify(products));\n      return { products };\n    });\n  }\n\n  deleteAll() {\n    this.setState((state) => {\n      const products = {};\n      localStorage.setItem(\"products\", JSON.stringify(products));\n      return { products };\n    });\n  }\n\n  onChangeHandler = (event) => {\n    const file = event.target.files[0];\n    Papa.parse(file, {\n      worker: true,\n      header: true,\n      complete: (result) => {\n        let products = {};\n        console.log(result.data)\n\n        for (const item of result.data) {\n          console.log(item)\n          products[item.SKU] = product(item.SKU, item.NAME, \"---\");\n          \n        }\n        console.log(products);\n        this.setState({ products });\n      },\n    });\n  };\n\n  render() {\n    const product = this.state.searchProduct;\n    const rows = Object.values(this.state.products).map(product => ({...product,id:product.sku}))\n    const columns = [\n      {field: \"sku\", headerName: 'SKU'},\n      {field: \"name\", headerName: 'Description',width:300},\n      {field: \"location\", headerName: 'Location',width:150},\n    ]\n    return (\n      <div>\n        <input type=\"file\" name=\"file\" onChange={this.onChangeHandler} />\n\n        <Typography variant=\"h2\">ReefH20 Warehouse</Typography>\n        <Paper>\n          <Typography variant=\"h3\">Search Inventory</Typography>\n          <TextField\n            label=\"SKU\"\n            variant=\"outlined\"\n            onChange={(event) => this.handleInputChange(event, \"searchSku\")}\n          />\n          <Button onClick={this.searchSku}>Search</Button>\n          <br />\n          <br />\n          <div>\n            <Typography>SKU: {product?.sku ?? \"#####\"}</Typography>\n            <Typography>Name: {product?.name ?? \"#####\"}</Typography>\n            <Typography>Location: {product?.location ?? \"#####\"}</Typography>\n          </div>\n          <br />\n          <Typography variant=\"h3\">Add Product</Typography>\n          <div>\n            <TextField\n              label=\"SKU\"\n              variant=\"outlined\"\n              onChange={(event) => this.handleInputChange(event, \"newSku\")}\n            />\n          </div>\n          <TextField\n            label=\"Name\"\n            variant=\"outlined\"\n            onChange={(event) => this.handleInputChange(event, \"newName\")}\n          />\n          <div>\n            <TextField\n              label=\"Location\"\n              variant=\"outlined\"\n              onChange={(event) => this.handleInputChange(event, \"newLocation\")}\n            />\n          </div>\n          <Button onClick={this.addProduct}>Add</Button>\n          <br />\n          <Typography variant=\"h3\">Remove Product</Typography>\n          <TextField\n            label=\"SKU\"\n            variant=\"outlined\"\n            onChange={(event) => this.handleInputChange(event, \"removeSku\")}\n          />\n          <Button\n            onClick={(e) => {\n              if (window.confirm(\"Are you sure you want to remove product?\"))\n                this.deleteAll(e);\n            }}\n          >\n            Remove\n          </Button>\n          <br />\n          <Button variant='contained' color='secondary' startIcon={<DeleteIcon/>}\n            onClick={(e) => {\n              if (\n                window.confirm(\"Are you sure you want to delete all products?\")\n              )\n                this.deleteAll(e);\n            }}\n          >\n            {\" \"}\n            Delete All{\" \"}\n          </Button>\n        </Paper>\n        <Typography variant=\"h3\">Inventory</Typography>\n        {/* <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>SKU</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Location</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.values(this.state.products).map((product) => (\n                <TableRow key={product.sku}>\n                  <TableCell>{product.sku}</TableCell>\n                  <TableCell>{product.name}</TableCell>\n                  <TableCell>{product.location}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={3}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer> */}\n        <DataGrid rows={rows} columns={columns} pageSize={100} checkboxSelection/>\n      </div>\n    );            \n  }\n}\n\nexport default App;\n","C:\\Users\\black\\Documents\\Development\\warehouse-map\\src\\index.js",[],{"ruleId":"18","severity":1,"message":"19","line":11,"column":3,"nodeType":"20","messageId":"21","endLine":11,"endColumn":12},{"ruleId":"18","severity":1,"message":"22","line":15,"column":3,"nodeType":"20","messageId":"21","endLine":15,"endColumn":17},{"ruleId":"18","severity":1,"message":"23","line":16,"column":3,"nodeType":"20","messageId":"21","endLine":16,"endColumn":8},{"ruleId":"18","severity":1,"message":"24","line":17,"column":3,"nodeType":"20","messageId":"21","endLine":17,"endColumn":12},{"ruleId":"18","severity":1,"message":"25","line":18,"column":3,"nodeType":"20","messageId":"21","endLine":18,"endColumn":11},{"ruleId":"18","severity":1,"message":"26","line":19,"column":3,"nodeType":"20","messageId":"21","endLine":19,"endColumn":12},{"ruleId":"18","severity":1,"message":"27","line":21,"column":7,"nodeType":"20","messageId":"21","endLine":21,"endColumn":9},"no-unused-vars","'TableBody' is defined but never used.","Identifier","unusedVar","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'TableHead' is defined but never used.","'fs' is assigned a value but never used."]